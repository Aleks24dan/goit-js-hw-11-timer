{"version":3,"sources":["js/index.js"],"names":["CountdownTimer","constructor","selector","targetDate","refs","days","document","querySelector","hours","mins","secs","setInterval","startDate","Date","now","time","console","log","getTimeComponents","updateClockface","clearInterval","getElementById","innerHTML","pad","Math","floor","value","String","padStart","textContent"],"mappings":";;;AAyHA,aAzHA,QAAA,sBA0EA,MAAMA,EACFC,aAAY,SAAEC,EAAF,WAAYC,IACfD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,KAAO,CACRC,KAAMC,SAASC,cAAc,uBAC7BC,MAAOF,SAASC,cAAc,wBAC9BE,KAAMH,SAASC,cAAc,uBAC7BG,KAAMJ,SAASC,cAAc,wBAGjCI,YAAY,KACFC,MAAAA,EAAYC,KAAKC,MACjBC,EAAO,KAAKZ,WAAaS,EAE3BG,GADJC,QAAQC,IAAIF,GACRA,EAAO,EAAG,CACJ,MAAA,KAAEV,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,GAAS,KAAKQ,kBAAkBH,GACtDI,KAAAA,gBAAgB,CAAEd,KAAAA,EAAMG,MAAAA,EAAOC,KAAAA,EAAMC,KAAAA,SAE1CU,gBACAd,SAASe,eAAe,WAAWC,UAAY,YAEpD,KAGPJ,kBAAkBH,GAMX,MAAA,CAAEV,KALK,KAAKkB,IAAIC,KAAKC,MAAMV,EAAQ,QAK3BP,MAJD,KAAKe,IAAIC,KAAKC,MAAOV,EAAQ,MAAyB,OAI9CN,KAHR,KAAKc,IAAIC,KAAKC,MAAOV,EAAQ,KAAoB,MAGnCL,KAFd,KAAKa,IAAIC,KAAKC,MAAOV,EAAQ,IAAc,OAKzDQ,IAAIG,GACGC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGjCT,iBAAgB,KAAEd,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,IAChCN,KAAAA,KAAKC,KAAKwB,eAAiBxB,IAC3BD,KAAAA,KAAKI,MAAMqB,eAAiBrB,IAC5BJ,KAAAA,KAAKK,KAAKoB,eAAiBpB,IAC3BL,KAAAA,KAAKM,KAAKmB,eAAiBnB,KAKpC,IAAIV,EAAe,CACfE,SAAU,WACVC,WAAY,IAAIU,KAAK","file":"js.0d6c05be.js","sourceRoot":"../src","sourcesContent":["import \"../sass/index.scss\";\n// // import template from \"./template.js\";\n\n\n// class CountdownTimer {\n//     constructor({ selector, targetDate }) {\n//         this.selector = selector;\n//         this.targetDate = targetDate;\n//         this.intervalId = null;\n//         this.refs = {\n//             daysPlag: document.querySelector('[data-value=\"days\"]'),\n//             hoursPlag: document.querySelector('[data-value=\"hours\"]'),\n//             minsPlag: document.querySelector('[data-value=\"mins\"]'),\n//             secsPlag: document.querySelector('[data-value=\"secs\"]'),\n//             // select: document.querySelector(this.selector),\n//             startButton: document.querySelector(\".Start\"),\n//             stopButton: document.querySelector(\".Stop\"),\n//         };\n//         this.isActive = false;\n//         // this.refs.select.insertAdjacentHTML(\"beforeend\", template);\n//         this.refs.startButton.addEventListener(\"click\",this.startInterval);\n//         this.refs.stopButton.addEventListener(\"click\", this.stopInterval);\n//     }\n\n//     startInterval() {\n//         if (this.isActive) {\n//             return;\n//         }\n//         this.isActive = true;\n//         this.intervalId = setInterval(() => {  \n//            const currentTime = Date.now();\n//             const targetTime = this.targetDate - currentTime;\n//             console.log(targetTime)\n//             const { days, hours, mins, secs } = this.getElementsOfTime(targetTime);\n//             this.changesDisplay({ days, hours, mins, secs });\n//         }, 1000);\n       \n//     }\n\n//     stopInterval() {\n//         clearInterval(this.intervalId);\n//         this.isActive = false;\n//     }\n\n//     pad(value) {\n//     return String(value).padStart(2,'0');\n// }\n\n//     changesDisplay({days, hours, mins, secs}) {\n//     this.refs.daysPlag.textContent = `${days}`,\n//     this.refs.hoursPlag.textContent = `${hours}`,\n//     this.refs.minsPlag.textContent = `${mins}`,\n//     this.refs.secsPlag.textContent = `${secs}`\n// }\n\n//     getElementsOfTime(targetTime) {\n//     const days = this.pad(Math.floor(targetTime / (1000 * 60 * 60 * 24)));\n//     const hours = this.pad(Math.floor((targetTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n//     const mins = this.pad(Math.floor((targetTime % (1000 * 60 * 60)) / (1000 * 60)));\n//     const secs = this.pad((Math.floor((targetTime % (1000 * 60)) / 1000)));\n        \n//         return { days, hours, mins, secs };\n//     }\n    \n// };\n\n\n//  new CountdownTimer({\n//     selector: \"#timer-1\",\n//     targetDate: new Date('Jul 17, 2021'),\n// })\n\n\n\nclass CountdownTimer {\n    constructor({ selector, targetDate}) {        \n        this.selector = selector;\n        this.targetDate = targetDate;\n        this.refs = {\n            days: document.querySelector('[data-value=\"days\"]'),\n            hours: document.querySelector('[data-value=\"hours\"]'),\n            mins: document.querySelector('[data-value=\"mins\"]'),\n            secs: document.querySelector('[data-value=\"secs\"]'),\n        };\n\n        setInterval(() => {\n            const startDate = Date.now();\n            const time = this.targetDate - startDate;\n            console.log(time)\n            if (time > 0) {\n                const { days, hours, mins, secs } = this.getTimeComponents(time);\n                this.updateClockface({ days, hours, mins, secs });\n            } else {\n                clearInterval();\n                document.getElementById(\"timer-1\").innerHTML = \"EXPIRED!\";\n            }            \n        }, 1000);\n    }\n\n    getTimeComponents(time) {\n    const days =  this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins =  this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs =  this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n    }\n\n    pad(value) {\n    return String(value).padStart(2, '0');\n    }\n\n    updateClockface({ days, hours, mins, secs }) {\n    this.refs.days.textContent = `${days}`;\n    this.refs.hours.textContent = `${hours}`;\n    this.refs.mins.textContent = `${mins}`;\n    this.refs.secs.textContent = `${secs}`; \n}\n};\n\n\nnew CountdownTimer({\n    selector: '#timer-1',\n    targetDate: new Date('Jul 15, 2021'),    \n});"]}