{"version":3,"sources":["js/template.js","js/index.js"],"names":["CountdownTimer","constructor","selector","targetDate","refs","daysPlag","document","querySelector","hoursPlag","minsPlag","secsPlag","select","insertAdjacentHTML","template","setInterval","currentTime","Date","now","targetTime","console","log","days","hours","mins","secs","getElementsOfTime","changesDisplay","pad","value","String","padStart","textContent","Math","floor"],"mappings":";;;AAoBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EApBgB,IAAA,EAAA,qqBAoBhB,QAAA,QAAA;;ACsCA,aA1DA,QAAA,sBACA,IAAA,EAAA,EAAA,QAAA,kBAyDA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAtDA,MAAMA,EACFC,aAAY,SAAEC,EAAF,WAAYC,IACfD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,KAAO,CACRC,SAAUC,SAASC,cAAc,uBACjCC,UAAWF,SAASC,cAAc,wBAClCE,SAAUH,SAASC,cAAc,uBACjCG,SAAUJ,SAASC,cAAc,uBACjCI,OAAQL,SAASC,cAAc,KAAKL,WAGlCE,KAAAA,KAAKO,OAAOC,mBAAmB,YAAaC,EAAjD,SAEDC,YAAY,KAEFC,MAAAA,EAAcC,KAAKC,MACnBC,EAAa,KAAKf,WAAaY,EAEjCG,GADJC,QAAQC,IAAIL,GACRG,EAAa,EAAG,CACV,MAAA,KAAEG,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,GAAS,KAAKC,kBAAkBP,GACtDQ,KAAAA,eAAe,CAAEL,KAAAA,EAAMC,MAAAA,EAAOC,KAAAA,EAAMC,KAAAA,MAE9C,KAIPG,IAAIC,GACGC,OAAAA,OAAOD,GAAOE,SAAS,EAAE,KAGhCJ,gBAAe,KAACL,EAAD,MAAOC,EAAP,KAAcC,EAAd,KAAoBC,IAC9BpB,KAAAA,KAAKC,SAAS0B,eAAiBV,IACpC,KAAKjB,KAAKI,UAAUuB,eAAiBT,IACrC,KAAKlB,KAAKK,SAASsB,eAAiBR,IACpC,KAAKnB,KAAKM,SAASqB,eAAiBP,IAGpCC,kBAAkBP,GAMP,MAAA,CAAEG,KALA,KAAKM,IAAIK,KAAKC,MAAMf,EAAc,QAK5BI,MAJL,KAAKK,IAAIK,KAAKC,MAAOf,EAAc,MAAyB,OAIhDK,KAHb,KAAKI,IAAIK,KAAKC,MAAOf,EAAc,KAAoB,MAGpCM,KAFnB,KAAKG,IAAKK,KAAKC,MAAOf,EAAc,IAAc,QAOnE,IAAIlB,EAAe,CACfE,SAAU,OACVC,WAAY,IAAIa,KAAK,kBAGzB,IAAIhB,EAAe,CACfE,SAAU,OACVC,WAAY,IAAIa,KAAK","file":"js.5a81ff91.js","sourceRoot":"../src","sourcesContent":["export default `<div class=\"timer\" id=\"timer-1\">\n        <div class=\"field\">\n            <span class=\"value\" data-value=\"days\">11</span>\n            <span class=\"label\">Days</span>\n        </div>\n    \n        <div class=\"field\">\n            <span class=\"value\" data-value=\"hours\">11</span>\n            <span class=\"label\">Hours</span>\n        </div>\n    \n        <div class=\"field\">\n            <span class=\"value\" data-value=\"mins\">11</span>\n            <span class=\"label\">Minutes</span>\n        </div>\n    \n        <div class=\"field\">\n            <span class=\"value\" data-value=\"secs\">11</span>\n            <span class=\"label\">Seconds</span>\n        </div>\n    </div>`","import \"../sass/index.scss\";\nimport template from \"./template.js\";\n\n\nclass CountdownTimer {\n    constructor({ selector, targetDate }) {\n        this.selector = selector;\n        this.targetDate = targetDate;\n        this.refs = {\n            daysPlag: document.querySelector('[data-value=\"days\"]'),\n            hoursPlag: document.querySelector('[data-value=\"hours\"]'),\n            minsPlag: document.querySelector('[data-value=\"mins\"]'),\n            secsPlag: document.querySelector('[data-value=\"secs\"]'),\n            select: document.querySelector(this.selector),\n        };\n\n         this.refs.select.insertAdjacentHTML(\"beforeend\", template);\n   \n        setInterval(() => {\n            \n            const currentTime = Date.now();\n            const targetTime = this.targetDate - currentTime;\n            console.log(currentTime)\n            if (targetTime > 0) {\n                const { days, hours, mins, secs } = this.getElementsOfTime(targetTime);\n                this.changesDisplay({ days, hours, mins, secs });\n            }\n        }, 1000);\n    \n    }\n\n    pad(value) {\n    return String(value).padStart(2,'0');\n}\n\n    changesDisplay({days, hours, mins, secs}) {\n    this.refs.daysPlag.textContent = `${days}`,\n    this.refs.hoursPlag.textContent = `${hours}`,\n    this.refs.minsPlag.textContent = `${mins}`,\n    this.refs.secsPlag.textContent = `${secs}`\n}\n\n    getElementsOfTime(targetTime) {\n    const days = this.pad(Math.floor(targetTime / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((targetTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((targetTime % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad((Math.floor((targetTime % (1000 * 60)) / 1000)));\n        \n        return { days, hours, mins, secs };\n}\n};\n\n\nnew CountdownTimer({\n    selector: \"body\",\n    targetDate: new Date('Jul 17, 2022'),\n})\n\nnew CountdownTimer({\n    selector: \"body\",\n    targetDate: new Date('Jul 17, 2022'),\n})"]}